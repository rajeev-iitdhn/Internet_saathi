# -*- coding: utf-8 -*-
"""allsathiwith_algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qcsH6A1Rn3w7Vzil9_TsmPvACu3-DjKb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.cloud import bigquery
import pandas_gbq
import pydata_google_auth

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
import xgboost as xgb




original_data= pandas_gbq.read_gbq('''with
ccf as (
select  id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_bain` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_Busara` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_beneficiaryprofile` union
all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_cisco` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_Feedback` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_googlebolo` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_hulplastic` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_internetsafety` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_kantar` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_multilink` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_plasticconsumption` union
all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_redbus` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_undpharyana` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_undpkarnataka` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_Unicef` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_washprogramme` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt from
`infra-211714.is_dashboard.clientformdatas_tataamc` 
),
ccf_assess as (
select  id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt, assessmentScore from
`infra-211714.is_dashboard.clientformdatas_bain` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt, assessmentScore from
`infra-211714.is_dashboard.clientformdatas_cisco` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt, assessmentScore from
`infra-211714.is_dashboard.clientformdatas_googlebolo` union all

select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_hulplastic` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_multilink` union all

select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_redbus` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt ,language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_undpharyana` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_undpkarnataka` union all
select id, formId, transactionID, formUniqueId, isActive, createdAt,
modifiedAt, language, location, timeTaken, deviceId, loginId,
internetSathiProfileId, village, block, district, state, partner,
mobileCreatedAt, mobileUpdatedAt,assessmentScore from
`infra-211714.is_dashboard.clientformdatas_tataamc` 
),
question as (select count(distinct  question) as count,formId from
`infra-211714.is_dashboard.formquestions` group by formId  ),
preass as (select cf.deviceId,cf.formId, avg(cf.assessmentScore)as
mean_assscore  from
ccf_assess
as cf
group by deviceId, formId),
livelihoodSaathi as (SELECT distinct deviceId FROM
`infra-211714.is_dashboard.saathiprofiles`),
overallDate as (select cf.deviceId,MIN(cf.createdAt) as
StartDate,MAX(cf.createdAt) as EndDate from
ccf as cf join livelihoodSaathi on cf.deviceId =
livelihoodSaathi.deviceId group by cf.deviceID),
sp as ( SELECT  id, ARRAY_AGG( fl ORDER BY modifiedAt DESC LIMIT 1
)[OFFSET(0)].* EXCEPT (id) FROM
`infra-211714.is_dashboard.saathiprofiles` as fl  GROUP BY id),
WorkingDuration as (select b.deviceId,count(distinct
Date(cf.mobileCreatedAt  )) as
OnFieldDaysCount,DATE_DIFF(DATE(overallDate.EndDate),DATE(overallDate.StartDate)
,day) as SystemDaysCount from sp as b  join ccf  as cf on cf.deviceId
= b.deviceId join overallDate on overallDate.deviceId = cf.deviceId
group
by b.deviceId,overallDate.StartDate,overallDate.EndDate),
vilblkCount as (select deviceId,count(distinct village) as
vil,count(distinct block) as blk from ccf group by deviceId),
forms as( SELECT formId, ARRAY_AGG( forms ORDER BY modifiedAt DESC
LIMIT 1 )[OFFSET(0)].* EXCEPT (formid) FROM
`infra-211714.is_dashboard.forms` as forms GROUP BY formId)

select
DISTINCT mt.deviceId,
  name,
  husbandprofession,
  NoOfFormsWorked,
   NoOfBeneficiaryToBeFilled,
count(distinct ccf.id) as BeneficiariesFilled,
  vill_count,
  block_count,
  OnFieldDaysCount,
  SystemDaysCount,
  meanTimePerQuestion,
  meantimeperform,
  percent_ass_score,
  engagedWithLivelihoodActivity,
  otherLivelihoodActivity,
  numberOfChildren,
  educationalQualification,
  age,
  haveAadhaarCard,
  haveAtmCard,
  mt.village,
  mt.district,
  mt.state
from

(SELECT
  DISTINCT mainTable.deviceId,
  name,
  husbandprofession,
  count(mainTable.formId) as NoOfFormsWorked,
  sum(forms.fillCount) as NoOfBeneficiaryToBeFilled,
  vilblkCount.vil AS vill_count,
  vilblkCount.blk AS block_count,
  sum(OnFieldDaysCount) as OnFieldDaysCount,
  sum(SystemDaysCount)+1 AS SystemDaysCount,
  SUM(questionsinform)/SUM(mean_time_per_form) AS meanTimePerQuestion,
  AVG(mean_time_per_form) AS meantimeperform,
  AVG(percent_ass_marks) AS percent_ass_score,
  engagedWithLivelihoodActivity,
  otherLivelihoodActivity,
  numberOfChildren,
  educationalQualification,
  age,
  haveAadhaarCard,
  haveAtmCard,
  mainTable.village,
  mainTable.district,
  mainTable.state
FROM (
  SELECT
    DISTINCT cf.deviceId,
    cf.name,
    cf.husbandProfession,
    mp.formId,
    WorkingDuration.OnFieldDaysCount,
    WorkingDuration.SystemDaysCount,
    question.count AS Questionsinform,
--     cf1.noOfAttempts,
    AVG(mp.timeTaken/1000) AS mean_time_per_form,
    AVG(mp.timeTaken/1000)/question.count AS meanTimePerQuestion,
    preass.mean_assscore*100/question.count AS percent_ass_marks,
    cf.engagedWithLivelihoodActivity,
    cf.otherLivelihoodActivity,
    cf.numberOfChildren,
    cf.educationalQualification,
    cf.age,
    cf.haveAadhaarCard,
    cf.haveAtmCard,
    m.name AS village,
    ds.name AS district,
    st.name AS state
  FROM (
    SELECT
      *,
      DATE_DIFF(max_crd,min_crd,day) AS work_duration
    FROM (
      SELECT
        a.deviceId,
        CAST(MAX(b.createdAt) AS date) AS max_crd,
        CAST(MIN(b.createdAt) AS date) AS min_crd
      FROM
       sp AS a
      INNER JOIN
        ccf AS b
      ON
        a.deviceId=b.deviceid
      GROUP BY
        a.deviceid)) AS k
  INNER JOIN
    sp AS cf
  ON
    cf.deviceId =k.deviceId
  LEFT JOIN
    `is_dashboard.villages` AS m
  ON
    m.id=cf.village
  LEFT JOIN
    `is_dashboard.districts` AS ds
  ON
    ds.id=m.district
  LEFT JOIN
    `is_dashboard.states` AS st
  ON
    st.id=m.state
  LEFT JOIN
    ccf AS cf1
  ON
    cf.deviceid=cf1.deviceid
  LEFT JOIN (
    SELECT
      deviceId,
      formId,
      timetaken
    FROM
      ccf
    WHERE
      deviceId!="null") AS mp
  ON
    cf.deviceId=mp.deviceId
  JOIN
    question
  ON
    question.formId = mp.formId
  LEFT JOIN
    preass
  ON
    preass.deviceId=cf.deviceId
  JOIN
    WorkingDuration
  ON
    WorkingDuration.deviceId = cf.deviceId
  GROUP BY
    deviceId,
    formId,
    cf.name,
    cf.numberOfChildren,
    cf.engagedWithLivelihoodActivity,
    cf.husbandProfession,
    cf.otherLivelihoodActivity,
    cf.educationalQualification,
    cf.age,
    m.name,
    ds.name,
    st.name,
    question.count,
    question.formId,
    preass.mean_assscore,
    WorkingDuration.OnFieldDaysCount,
    WorkingDuration.SystemDaysCount,
    cf.haveAadhaarCard,
    cf.haveAtmCard) AS mainTable
JOIN
  vilblkCount
ON
  vilblkCount.deviceId = mainTable.deviceId
join forms on forms.formId = mainTable.formId
GROUP BY
  deviceId,
  name,
  husbandprofession,
  engagedWithLivelihoodActivity,
  otherLivelihoodActivity,
  numberOfChildren,
  educationalQualification,
  age,
  haveAadhaarCard,
  haveAtmCard,
  village,
  district,
  state,
  vill_count,
  block_count) as mt join ccf on ccf.deviceId = mt.deviceId group by
mt.deviceId, name,
  husbandprofession,
  NoOfFormsWorked,
   NoOfBeneficiaryToBeFilled,
  vill_count,
  block_count,
  OnFieldDaysCount,
  SystemDaysCount,
  meanTimePerQuestion,
  meantimeperform,
  percent_ass_score,
  engagedWithLivelihoodActivity,
  otherLivelihoodActivity,
  numberOfChildren,
  educationalQualification,
  age,
  haveAadhaarCard,
  haveAtmCard,
  mt.village,
  mt.district,
  mt.state
''',
  project_id="infra-211714",
  credentials=credentials,)

#Data corrections and feature engineering
num_fit=['engagedWithLivelihoodActivity',"numberOfChildren","educationalQualification","age","haveAadhaarCard","haveAtmCard"]
original_data[num_fit]=original_data[num_fit].apply(pd.to_numeric)
original_data["percent_target_match"]=original_data.BeneficiariesFilled*100/original_data.NoOfBeneficiaryToBeFilled
data=original_data



def cat_cont_divider(data):
  cat_col=[]
  cont_col=[]
  for col in data.columns:
    if len (data[str(col)].value_counts())<20:
      cat_col.append(str(col))
    else:
      cont_col.append(col)
  return cat_col, cont_col

useful=data[data.percent_ass_score.notna()]

useful_cont=useful[list(set(useful.select_dtypes(include=["int64","float64"]).columns).difference(set(cat_cont_divider(useful)[0])))]
useful_cat=useful[list(set(cat_cont_divider(useful)[0]).difference(set(useful.select_dtypes(include=["object"]).columns)))]
useful_cat["percent_ass_score"]=useful_cont.percent_ass_score

model_cont=useful_cont.corr()[abs(useful_cont.corr().percent_ass_score)>0.2].T.columns
model_cat=useful_cat.corr()[abs(useful_cat.corr().percent_ass_score)>0.2].T.columns
output_feature="percent_ass_score"
model_var=list(set(model_cont.append(model_cat)))
model_var.remove(output_feature)

x=useful[model_var].interpolate()
y=useful[output_feature]



lm=LinearRegression()
rfr=RandomForestRegressor(random_state=10)
dtr=DecisionTreeRegressor(random_state=10)
xgbr=xgb.XGBRegressor()

score_lm=int(abs(cross_val_score(lm, x,y, cv=10, scoring='neg_mean_squared_error')).mean())
score_rfr=int(abs(cross_val_score(rfr, x,y, cv=10, scoring='neg_mean_squared_error')).mean())
score_dtr=int(abs(cross_val_score(dtr, x,y,cv=10, scoring='neg_mean_squared_error')).mean())
score_xgb=int(abs(cross_val_score(xgbr, x,y,cv=10, scoring='neg_mean_squared_error')).mean())
scores=[score_lm, score_rfr, score_dtr, score_xgb]

model_name=["lm","rfr","dtr","xgbr"]
df=pd.DataFrame()
df["mdl_name"]=model_name
df["accuracy"]=scores
best_mdl=df.loc[df.accuracy.nsmallest(1).index,].mdl_name.values[0]
best_mdl

mdl=dict({"rfr":RandomForestRegressor(random_state=10), 
          "lm":LinearRegression(), 
          "dtr":DecisionTreeRegressor(random_state=10),
          "xgb":xgb.XGBRegressor()})

demo=["deviceId","name","husbandprofession","village","district","state"]

final_prediction=mdl[best_mdl].fit(x,y).predict(original_data[model_var].interpolate())
saathi_with_assessment=original_data[demo]
saathi_with_assessment["perf_score"]=pd.Series(final_prediction).apply(lambda x:round(x, 3))

topsathi=saathi_with_assessment.loc[saathi_with_assessment.sort_values("perf_score",
 ascending=False).index, :].head(int(0.05*len(original_data))).reset_index(drop=True)
bottomsathi=saathi_with_assessment.loc[saathi_with_assessment.sort_values("perf_score", ascending=False).index,:].tail(
    int(0.05*len(original_data))).reset_index(drop=True)

topsathi

list(topsathi.head().T.to_dict().values())











# on_field_days_count=original_data.loc[original_data.OnFieldDaysCount.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# system_days_count=original_data.loc[original_data.SystemDaysCount.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# form_count=original_data.loc[original_data.NoOfFormsWorked.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# NoOfBeneficiaryFilled_count=original_data.loc[original_data.NoOfBeneficiaryToBeFilled.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# BeneficiaryFilled_count=original_data.loc[original_data.BeneficiariesFilled.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# vill_count=original_data.loc[original_data.vill_count.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# block_count=original_data.loc[original_data.block_count.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# mean_time_per_question=original_data.loc[original_data.meanTimePerQuestion.sort_values().index].head(int(0.5*len(original_data)))
# mean_time_per_form=original_data.loc[original_data.meantimeperform.sort_values().index].head(int(0.5*len(original_data)))
# percent_ass_score=original_data.loc[original_data.percent_ass_score.sort_values(ascending=False).index].head(int(0.5*len(original_data)))
# number_of_children=original_data.loc[original_data.numberOfChildren.sort_values().index].head(int(0.5*len(original_data)))
# age_count=original_data.loc[original_data.age.sort_values().index].head(int(0.5*len(original_data)))
# percent_target_match_count=original_data.loc[original_data.percent_target_match.sort_values().index].head(int(0.5*len(original_data)))

# on_field_days_match_percent=len(pd.merge(topsathi, on_field_days_count,how="inner", on=["deviceId"]))*100/len(topsathi)
# system_days_count_percent=len(pd.merge(topsathi, system_days_count, how="inner", on=["deviceId"]))*100/len(topsathi)
# form_count_match_percent=len(pd.merge(topsathi, form_count,how="inner", on=["deviceId"]))*100/len(topsathi)
# NoOfBeneficiaryFilled_match_percent=len(pd.merge(topsathi, NoOfBeneficiaryFilled_count, how="inner",on=["deviceId"]))*100/len(topsathi)
# BeneficiaryFilled_match_percent=len(pd.merge(topsathi, BeneficiaryFilled_count, how="inner",on=["deviceId"]))*100/len(topsathi)
# vill_count_match_percent=len(pd.merge(topsathi, vill_count,how="inner", on=["deviceId"]))*100/len(topsathi)
# block_count_match_percent=len(pd.merge(topsathi, block_count,how="inner", on=["deviceId"]))*100/len(topsathi)
# mtpq_match_percent=len(pd.merge(topsathi, mean_time_per_question,how="inner", on=["deviceId"]))*100/len(topsathi)
# mtpf_match_percent=len(pd.merge(topsathi, mean_time_per_form,how="inner", on=["deviceId"]))*100/len(topsathi)
# percent_ass_score_match_percent=len(pd.merge(topsathi, percent_ass_score,how="inner", on=["deviceId"]))*100/len(topsathi)
# number_of_children_match_percent=len(pd.merge(topsathi, number_of_children,how="inner", on=["deviceId"]))*100/len(topsathi)
# age_match_percent=len(pd.merge(topsathi, age_count,how="inner", on=["deviceId"]))*100/len(topsathi)
# percent_target_match_percent=len(pd.merge(topsathi, percent_target_match_count,how="inner", on=["deviceId"]))*100/len(topsathi)

# match_percent=pd.DataFrame()
# match_percent["variables"]=["on_field_days_match_percent","system_days_count_percent","form_count_match_percent","vill_count_match_percent","block_count_match_percent","mtpq_match_percent","mtpf_match_percent","percent_ass_score_match_percent","number_of_children_match_percent","age_match_percent","percent_target_match_percent"]
# match_percent["percent_of_match"]=pd.Series([on_field_days_match_percent,system_days_count_percent,form_count_match_percent,vill_count_match_percent,block_count_match_percent,mtpq_match_percent,mtpf_match_percent,percent_ass_score_match_percent,number_of_children_match_percent, age_match_percent,percent_target_match_percent])

# match_percent.sort_values("percent_of_match",ascending=False)

import os
os.chdir("/content/drive/My Drive/ML_works/Internet_sathi/IS_ML_PROBLEMS/prob_1_identify_the_right_fit_of_rural_woman............../all_saathi")

# pd.merge(saathi_north, topsathi, how="inner", on=["name", "state", "district"]).to_csv("matched_saathi_with_algo_all.csv")
# match_percent.sort_values("percent_of_match", ascending=False).to_csv("match_percent_with_algo_all.csv")
# topsathi.to_csv("topsathi_with_algo_all.csv")
# bottomsathi.to_csv("bottomsathi_with_algo_all.csv")

# topsathi_with_algo_all=topsathi
# bottomsathi_with_algo_all=bottomsathi
# topsathi_without_algo_all=pd.read_csv("topsathi_without_algo_all.csv", index_col=False)
# bottomsathi_without_algo_all=pd.read_csv("bottomsathi_without_algo_all.csv", index_col=False)

# common_saathi=list(set(topsathi_with_algo_all.deviceId)&set(topsathi_without_algo_all.deviceId))

# common_saathi_list=topsathi_with_algo_all[topsathi_with_algo_all.deviceId.isin(common_saathi)]

# len(common_saathi_list)

# common_saathi_list.to_csv("top_performing_saathi_all.csv")

# common_saathi_list["perf_score"]=common_saathi_list["perf_score"].apply(int)

# common_saathi_list.head()

# saathi_north=pd.read_csv("/content/drive/My Drive/ML_works/Internet_sathi/IS_ML_PROBLEMS/prob_1_identify_the_right_fit_of_rural_woman............../other_files/Saathi_north. - Sheet12 (1).csv")
# saathi_north.rename(columns={"Saathi Name":"name", "State":"state","District Name":"district", "Block":"block"}, inplace=True)

# cross_matched_saathis=pd.merge(saathi_north, common_saathi_list, how="inner", on=["name", "state", "district"])

# cross_matched_saathis.to_csv("cross_matched_saathis_all.csv")

# hul_data= pandas_gbq.read_gbq('''select distinct deviceId from `infra-211714.is_dashboard.clientformdatas_tataamc` where formId in (70,71,72,73,74)
# ''',
#   project_id="infra-211714",
#   credentials=credentials,)

# hul_topsathi=topsathi[topsathi.deviceId.isin (list(hul_data.deviceId))]

# hul_topsathi.head()

# len(common_saathi_list)

# len(topsathi)

# len(hul_data)

# len(original_data[original_data.deviceId.isin(list(hul_data.deviceId))])

# len(common_saathi_list[common_saathi_list.deviceId.isin(list(hul_data.deviceId))])

# from datetime import datetime, timedelta

# now=datetime.now()

# btime=now-timedelta(minutes=30)

# import pandas as pd
# pd.to_datetime(btime)

# list(topsathi.T.to_dict().values())

